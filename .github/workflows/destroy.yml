name: Destroy MCP infrastructure (destroy)

on:
  workflow_dispatch:
    inputs:
      use_cloudfront:
        type: boolean
        description: Enable CloudFront distribution flag (ensures consistent destroy variables)
        default: false

concurrency:
  group: build-deploy-mcp
  cancel-in-progress: false

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fail-fast prerequisites
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          set -euo pipefail
          missing=()
          for var in AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION AWS_ACCOUNT_ID; do
            if [ -z "${!var:-}" ]; then
              missing+=("$var")
            fi
          done
          if [ "${#missing[@]}" -gt 0 ]; then
            echo "Missing required GitHub secrets: ${missing[*]}" >&2
            exit 1
          fi

          aws sts get-caller-identity >/dev/null

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform destroy
        working-directory: infra
        env:
          DB_HOST: ${{ secrets.MCP_DB_HOST }}
          DB_PORT: ${{ secrets.MCP_DB_PORT }}
          DB_USER: ${{ secrets.MCP_DB_USER }}
          DB_PASSWORD: ${{ secrets.MCP_DB_PASSWORD }}
          DB_NAME: ${{ secrets.MCP_DB_NAME }}
          USE_CLOUDFRONT_INPUT: ${{ inputs.use_cloudfront }}
          MCP_HTTP_TOKEN: ${{ secrets.MCP_HTTP_TOKEN }}
        run: |
          set -euo pipefail
          HOST="${DB_HOST:-127.0.0.1}"
          PORT="${DB_PORT:-5433}"
          USE_CLOUDFRONT="$USE_CLOUDFRONT_INPUT"
          if [ -z "$USE_CLOUDFRONT" ]; then
            USE_CLOUDFRONT=false
          fi
          TF_ARGS=(
            "-var=aws_region=${AWS_REGION}"
            "-var=account_id=${AWS_ACCOUNT_ID}"
            "-var=http_token=${MCP_HTTP_TOKEN}"
            "-var=db_host=$HOST"
            "-var=db_port=$PORT"
            "-var=db_user=${DB_USER}"
            "-var=db_password=${DB_PASSWORD}"
            "-var=db_name=${DB_NAME}"
            "-var=use_cloudfront=$USE_CLOUDFRONT"
          )
          LOG_PATH="$RUNNER_TEMP/terraform-destroy.log"
          echo "Terraform destroy logs will be stored at $LOG_PATH"
          echo "::group::Terraform destroy"
          set +e
          ./terraform.sh destroy -- "${TF_ARGS[@]}" -auto-approve |& tee "$LOG_PATH"
          status=${PIPESTATUS[0]}
          set -e
          echo "::endgroup::"
          if [ "$status" -ne 0 ]; then
            echo "::error::Terraform destroy failed. Review the logs above." >&2
            exit "$status"
          fi
          echo "Terraform destroy completed successfully. Logs archived at $LOG_PATH"
